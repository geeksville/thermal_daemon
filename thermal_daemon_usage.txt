Thermal Daemon Usage

Daemon acts to cool the system under the following two modes :
1. Zero Configuration Mode
2.  User defined configuration mode

1. Zero Configuration Mode
For most users, this should be enough to bring the CPU temperature of the system under control. These are the high level operations in this mode:
- Get a temperature which is high enough to apply cooling action (target temperature). This is exported using the IA32 target temperature in MSR (Machine Specific Register). This can be read from /sys/devices/platform/coretemp.0/tempX_max. It is possible that this value is not present in a platform. In this case, it uses a fixed offset from the critical temperature.
- Read temperature either by polling or by event notifications (using x86 package temperature driver to be merged to 3.10 kernel). Rate of polling can be controlled by command line argument. Default is 4 seconds. Temperature can be read by using either coretemp sys-fs or hwmon on older system.
- When the temperature is more than the target temperature, it will activate the cooling devices. There is a default order hard-coded in the coded in the code, but can be overridden by configuring “thermal-cdev-order.xml”.
- Dynamically it will change the temperature at which compensation is applied, to keep the system under the target temperature.
- Also target temperature can be changed by sending message via dbus. Refer to script “test/test_pref.sh”in the thermal daemon source repository. It is basically sending
“dbus-send --system --dest=org.freedesktop.thermald /org/freedesktop/thermald org.freedesktop.thermald.SetUserSetPoint string:your_temperature_value_in_milli_degree_celsius
”


2. User defined configuration
In this mode, this daemon uses configuration defined in “thermal-conf.xml”. There can be multiple configurations in this file. It will pick a configuration matching your system uuid (/sys/class/dmi/id/product_uuid). This configuration is similar to the ACPI style configuration at /sys/class/thermal. This configuration has two parts: “Thermal Zones” and “Cooling devices”.
Thermal zones are used to read temperature. A path for a temperature sensor can be configured here. Also each thermal zone has trip points, which are triggered to activate a cooling device. For example, it can be configured to “read temperature from a sensor sys-fs path and when the temperature exceeds a trip point, activate a cooling device”. 
Cooling devices are used to cool the system. Each cooling device has sys-fs path, minimum value and a maximum value. The current state value is incremented by 1 for each activation, but the compensation increment can also be configured. Every time temperature is more than a trip point value, the state is incremented till it reaches the max state.

====================================================================

Default cooling devices

It is possible that some of these cooling devices are not present. In this case it will use the next highest priority cooling devices. Also when temperature can't be controlled by one cooling device, it selects the next in order.
 

CDEV_INTEL_RAPL_DRIVER
RAPL (Running Average Power Limit) is the method used to control CPU performance in Intel CPUs. This is available only from Sandy Bridge and later micro-architectures. On older CPUs RAPL interface is not present. This driver is not available in the upstream kernel yet. 

CDEV_MSR_RAPL
Till there is an upstream driver available to use RAPL interface, RAPL can use MSR (machine specific registers). But MSR access from user space requires CONFIG_X86_MSR configuration in kernel. There is a possibility that your system doesn't have MSR access from user space. In this case this method can't be used.

CDEV_INTEL_PSTATE_DRIVER
Intel P state driver is available from kernel version 3.9. This is a replacement for cpufreq driver to control system performance. If your system has this driver, this will be used.

CDEV_POWER_CLAMP
Intel power clamp is available in upstream kernel. It uses idle injection to CPUs to reduce performance.      This driver is already available in the upstream Linux kernel.

CDEV_MSR_TURBO_STATES
CDEV_MSR_PSTATES_PARTIAL
CDEV_TURBO_ON_OFF
CDEV_MSR_PSTATES
CDEV_T_STATES
These cooling devices use MSRs to control performance. You need user space MSR access. So a kernel with CONFIG_X86_MSR is needed.

CDEV_CPU_FREQ
This uses cpufreq driver to limit the maximum frequency of operation. Even the older system has this driver, so this can be used as a fall-back on most systems.
